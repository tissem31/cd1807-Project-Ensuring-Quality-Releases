name: Azure Pipelines

trigger:
  - master

pool:
  name: myAgentPool

variables:
  python.version: '3.7.6'
  azureServiceConnectionId: 'e1079189-5de6-427c-8758-cba55c275db4'
  projectRoot: $(System.DefaultWorkingDirectory)
  environmentName: 'test-vm'

stages:

# ============================
# BUILD STAGE
# ============================
- stage: Build
  jobs:
    - job: BuildInfrastructure
      steps:

        # Terraform installation
        - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
          displayName: 'Terraform installation'
          inputs:
            terraformVersion: '1.2.9'

        # Terraform init
        - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
          displayName: 'Terraform init'
          inputs:
            provider: 'azurerm'
            command: 'init'
            workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
            backendServiceArm: '$(azureServiceConnectionId)'
            backendAzureRmResourceGroupName: 'Azuredevops'
            backendAzureRmStorageAccountName: 'tfstate469626245'
            backendAzureRmContainerName: 'tfstate'
            backendAzureRmKey: 'projectEnsuringQualityReleases.tfstate'

        - task: TerraformTaskV4@4
          displayName: Terraform validate
          inputs:
            provider: 'azurerm'
            command: 'validate'

        # Terraform apply
        - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
          displayName: Terraform apply
          inputs:
            provider: 'azurerm'
            command: 'apply'
            workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
            environmentServiceNameAzureRM: '$(azureServiceConnectionId)'

        # Node.js and Newman installation
        - task: UseNode@1
          displayName: 'Install Node.js'
          inputs:
            version: '16.x'

        - task: CmdLine@2
          displayName: Install Newman
          inputs:
            script: 'npm install -g newman'
            workingDirectory: $(System.DefaultWorkingDirectory)

        # Postman tests
        - task: CmdLine@2
          displayName: 'List files in working directory'
          inputs:
            script: 'ls -la'
            workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'

        - task: CmdLine@2
          displayName: Run Data Validation Tests
          continueOnError: true
          inputs:
            script: 'newman run TestSuite.Data-Validation.json -e Test.environment.json --reporters cli,junit --reporter-junit-export TEST-DataValidation.xml'
            workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'

        - task: CmdLine@2
          displayName: Run Regression Tests
          continueOnError: true
          inputs:
            script: 'newman run TestSuite.Regression.json -e Test.environment.json --reporters cli,junit --reporter-junit-export TEST-Regression.xml'
            workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'

        - task: PublishTestResults@2
          displayName: Publish Postman Test Results
          inputs:
            testResultsFormat: 'JUnit'
            testResultsFiles: '**/TEST-*.xml'
            searchFolder: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'
            mergeTestResults: true
            testRunTitle: 'Postman API Test Results'

        # Archive UI tests
        - task: ArchiveFiles@2
          displayName: 'Archive UI Tests'
          inputs:
            rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/selenium'
            includeRootFolder: false
            archiveType: 'zip'
            archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-uitests.zip'

        - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-uitests.zip
          displayName: 'Upload Package'
          artifact: drop-uitests

        # Archive FakeRestAPI
        - task: ArchiveFiles@2
          displayName: 'Archive FakeRestAPI'
          inputs:
            rootFolderOrFile: ''
            includeRootFolder: false
            archiveType: 'zip'
            archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'

        - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
          displayName: 'Upload Package'
          artifact: drop-fakerestapi

        # Archive JMeter test suite
        - task: ArchiveFiles@2
          displayName: 'Archive PerformanceTestSuite'
          inputs:
            rootFolderOrFile: ''
            includeRootFolder: false
            archiveType: 'zip'
            archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-perftests.zip'

        - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-perftests.zip
          displayName: 'Upload Package'
          artifact: drop-perftests

# ============================
# DEPLOYMENT STAGE
# ============================
- stage: Deploy
  jobs:

    # Deploy FakeRestAPI
    - deployment: FakeRestAPI
      pool:
        name: myAgentPool
      environment: 'test-vm'
      strategy:
        runOnce:
          deploy:
            steps:
              - task: AzureWebApp@1
                displayName: 'Deploy Azure Web App'
                inputs:
                  azureSubscription: $(azureServiceConnectionId)
                  appName: 'myApplicationfinal07-AppService'
                  appType: webApp
                  package: '$(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip'

              - task: AzureAppServiceSettings@1
                displayName: 'Reset WEBSITE_RUN_FROM_PACKAGE = 0'
                inputs:
                  azureSubscription: $(azureServiceConnectionId)
                  appName: 'myApplicationfinal07-AppService'
                  resourceGroupName: 'Azuredevops'
                  appSettings: |
                    [
                      {
                        "name": "WEBSITE_RUN_FROM_PACKAGE",
                        "value": "0",
                        "slotSetting": false
                      }
                    ]

              - task: CmdLine@2
                displayName: 'Install Java and run JMeter Tests'
                inputs:
                  script: |
                    sudo apt-get update
                    sudo apt-get install -y openjdk-11-jdk
                    export JAVA_HOME=/usr/lib/jvm/java-11-openjdk-amd64
                    export PATH=$JAVA_HOME/bin:$PATH
                    java -version
                    wget https://archive.apache.org/dist/jmeter/binaries/apache-jmeter-5.2.1.tgz
                    tar -xf apache-jmeter-5.2.1.tgz
                    unzip -o $(Build.BuildId)-perftests.zip -d $(Build.BuildId)-perftests
                    ./apache-jmeter-5.2.1/bin/jmeter -n -t $(Build.BuildId)-perftests/automatedtesting/jmeter/test-suite/StressTestSuite.jmx -j jmeter.log -f
                    cat jmeter.log
                  workingDirectory: $(Pipeline.Workspace)/drop-perftests

#--------------------------------------------#  
# Selenium | Functional UI Tests
# ToDo: 
    - deployment: VMDeploy
      displayName: Selenium Tests
      environment:
        name: 'test-vm'        # ToDo: Change/provide a name
        resourceType: VirtualMachine
        tags: test
      strategy:
        runOnce:
          deploy:
            steps:
            - download: current
              artifact: drop-uitests     # ToDo: Change/provide a name
          
            - task: Bash@3
              inputs:
                targetType: 'inline'
                script: |   

                  set -e

                  echo "== üõ†Ô∏è Installing dependencies =="
                  sudo apt-get update -y
                  sudo apt-get install -y python3-pip unzip chromium-browser curl jq

                  echo "== üß™ Creating Python virtual environment =="
                  python3 -m venv venv
                  source venv/bin/activate

                  echo "== üêç Installing Selenium in virtual environment =="
                  pip install --upgrade pip
                  pip install selenium

                  # Optional: Confirm installation
                  echo "== ‚úÖ Verifying Selenium installation =="
                  python -c "import selenium; print('‚úÖ Selenium installed in venv:', selenium.__version__)"
                   python3 -m site                 

                  echo "== üìÅ Preparing workspace =="
                  cd ~/
                  APP_DIR="/home/azureuser/app"
                  mkdir -p "$APP_DIR"
                  cd "$APP_DIR"

                  echo "== üîç Checking artifacts =="
                  ARTIFACTS_DIR="/home/azureuser/azagent/_work/1/drop-uitests"
                  if [ ! -d "$ARTIFACTS_DIR" ]; then
                    echo "‚ùå ERROR: Artifact directory '$ARTIFACTS_DIR' not found!"
                    exit 1
                  fi

                  ZIP_FILE=$(find "$ARTIFACTS_DIR" -name "*.zip" | head -1)
                  if [ -z "$ZIP_FILE" ]; then
                    echo "‚ùå ERROR: No zip file found in $ARTIFACTS_DIR"
                    ls -la "$ARTIFACTS_DIR"
                    exit 1
                  fi

                  echo "üì¶ Found test archive: $ZIP_FILE"
                  cp "$ZIP_FILE" tests.zip

                  echo "== üìÇ Unzipping test archive =="
                  unzip -o tests.zip
                  find . -name "*.py" -type f

                  echo "== üåê Checking Chrome & downloading matching ChromeDriver =="
                  CHROME_VERSION=$(chromium-browser --version | awk '{ print $2 }')
                  CHROMEDRIVER_MAJOR=$(echo "$CHROME_VERSION" | cut -d '.' -f1)

                  echo "Chrome version: $CHROME_VERSION"
                  echo "Detected Chrome major version: $CHROMEDRIVER_MAJOR"

                  LATEST_URL="https://chromedriver.storage.googleapis.com/LATEST_RELEASE_${CHROMEDRIVER_MAJOR}"
                  CHROMEDRIVER_VERSION=$(curl -s "$LATEST_URL")

                  # Test si la version est valide (pas un XML d‚Äôerreur)
                  if [[ "$CHROMEDRIVER_VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
                    echo "Version ChromeDriver correspondante trouv√©e : $CHROMEDRIVER_VERSION"
                  else
                    echo "‚ö†Ô∏è Version ChromeDriver pour Chrome $CHROMEDRIVER_MAJOR introuvable, r√©cup√©ration de la version stable la plus r√©cente"
                    LATEST_URL="https://chromedriver.storage.googleapis.com/LATEST_RELEASE"
                    CHROMEDRIVER_VERSION=$(curl -s "$LATEST_URL")
                    echo "Utilisation de la version ChromeDriver : $CHROMEDRIVER_VERSION"
                  fi

                  echo "üì• T√©l√©chargement de ChromeDriver $CHROMEDRIVER_VERSION"
                  wget -q "https://chromedriver.storage.googleapis.com/${CHROMEDRIVER_VERSION}/chromedriver_linux64.zip"
                  unzip -o chromedriver_linux64.zip
                  chmod +x chromedriver
                  sudo mv chromedriver /usr/local/bin/

                  echo "‚úÖ ChromeDriver install√© avec succ√®s"
                  
                  echo "== üß™ Running Selenium test =="
                  TEST_FILE=$(find . -name "add_remove_from_cart.py" -type f | head -1)

                  if [ -n "$TEST_FILE" ]; then
                    echo "üìÑ Found test file: $TEST_FILE"
                    TEST_DIR=$(dirname "$TEST_FILE")
                    cd "$TEST_DIR"

                    LOG_FILE="/home/azureuser/app/selenium.log"
                    touch "$LOG_FILE"
                    chmod 666 "$LOG_FILE"

                    echo "=== EXECUTING SELENIUM TEST ===" | tee "$LOG_FILE"
                    venv/bin/python add_remove_from_cart.py 2>&1 | tee -a "$LOG_FILE"
                    echo "=== TEST EXECUTION COMPLETED ===" | tee -a "$LOG_FILE"
                  
                  else
                  
                    echo "‚ùå ERROR: Test file 'add_remove_from_cart.py' not found!"
                    echo "All Python files found:"
                    find "$APP_DIR" -name "*.py" -type f
                    exit 1
                  fi

                  echo "== üìÑ Displaying test log =="
                  cat "$LOG_FILE" || echo "No log file found"

                  echo "== üì§ Copying log to TestResults for publication =="
                  mkdir -p /home/azureuser/TestResults
                  cp "$LOG_FILE" /home/azureuser/TestResults/ 2>/dev/null || echo "‚ö†Ô∏è No log file to copy"  

            # Publier les r√©sultats des tests comme artifact
            - task: PublishBuildArtifacts@1
              inputs:
                pathtoPublish: '/home/azureuser/TestResults'
                artifactName: 'selenium-test-results'
              displayName: 'Publish Selenium Test Results'
              condition: always() # Publier m√™me si les tests √©chouent