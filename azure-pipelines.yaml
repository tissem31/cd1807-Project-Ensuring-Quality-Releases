name: Azure Pipelines

trigger:
  - master

pool:
  name: myAgentPool

variables:
  python.version: '3.7.6'
  azureServiceConnectionId: 'e1079189-5de6-427c-8758-cba55c275db4'
  projectRoot: $(System.DefaultWorkingDirectory)
  environmentName: 'test-vm'

stages:

# ============================
# BUILD STAGE
# ============================
- stage: Build
  jobs:
    - job: BuildInfrastructure
      steps:

        # Terraform installation
        - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
          displayName: 'Terraform installation'
          inputs:
            terraformVersion: '1.2.9'

        # Terraform init
        - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
          displayName: 'Terraform init'
          inputs:
            provider: 'azurerm'
            command: 'init'
            workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
            backendServiceArm: '$(azureServiceConnectionId)'
            backendAzureRmResourceGroupName: 'Azuredevops'
            backendAzureRmStorageAccountName: 'tfstate469626245'
            backendAzureRmContainerName: 'tfstate'
            backendAzureRmKey: 'projectEnsuringQualityReleases.tfstate'

        - task: TerraformTaskV4@4
          displayName: Terraform validate
          inputs:
            provider: 'azurerm'
            command: 'validate'

        # Terraform apply
        - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
          displayName: Terraform apply
          inputs:
            provider: 'azurerm'
            command: 'apply'
            workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
            environmentServiceNameAzureRM: '$(azureServiceConnectionId)'

        # Node.js and Newman installation
        - task: UseNode@1
          displayName: 'Install Node.js'
          inputs:
            version: '16.x'

        - task: CmdLine@2
          displayName: Install Newman
          inputs:
            script: 'npm install -g newman'
            workingDirectory: $(System.DefaultWorkingDirectory)

        # Postman tests
        - task: CmdLine@2
          displayName: 'List files in working directory'
          inputs:
            script: 'ls -la'
            workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'

        - task: CmdLine@2
          displayName: Run Data Validation Tests
          continueOnError: true
          inputs:
            script: 'newman run TestSuite.Data-Validation.json -e Test.environment.json --reporters cli,junit --reporter-junit-export TEST-DataValidation.xml'
            workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'

        - task: CmdLine@2
          displayName: Run Regression Tests
          continueOnError: true
          inputs:
            script: 'newman run TestSuite.Regression.json -e Test.environment.json --reporters cli,junit --reporter-junit-export TEST-Regression.xml'
            workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'

        - task: PublishTestResults@2
          displayName: Publish Postman Test Results
          inputs:
            testResultsFormat: 'JUnit'
            testResultsFiles: '**/TEST-*.xml'
            searchFolder: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'
            mergeTestResults: true
            testRunTitle: 'Postman API Test Results'

        # Archive UI tests
        - task: ArchiveFiles@2
          displayName: 'Archive UI Tests'
          inputs:
            rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/selenium'
            includeRootFolder: false
            archiveType: 'zip'
            archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-uitests.zip'

        - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-uitests.zip
          displayName: 'Upload Package'
          artifact: drop-uitests

        # Archive FakeRestAPI
        - task: ArchiveFiles@2
          displayName: 'Archive FakeRestAPI'
          inputs:
            rootFolderOrFile: ''
            includeRootFolder: false
            archiveType: 'zip'
            archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'

        - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
          displayName: 'Upload Package'
          artifact: drop-fakerestapi

        # Archive JMeter test suite
        - task: ArchiveFiles@2
          displayName: 'Archive PerformanceTestSuite'
          inputs:
            rootFolderOrFile: ''
            includeRootFolder: false
            archiveType: 'zip'
            archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-perftests.zip'

        - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-perftests.zip
          displayName: 'Upload Package'
          artifact: drop-perftests

# ============================
# DEPLOYMENT STAGE
# ============================
- stage: Deploy
  jobs:

    # Deploy FakeRestAPI
    - deployment: FakeRestAPI
      pool:
        name: myAgentPool
      environment: 'test-vm'
      strategy:
        runOnce:
          deploy:
            steps:
              - task: AzureWebApp@1
                displayName: 'Deploy Azure Web App'
                inputs:
                  azureSubscription: $(azureServiceConnectionId)
                  appName: 'myApplicationfinal07-AppService'
                  appType: webApp
                  package: '$(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip'

              - task: AzureAppServiceSettings@1
                displayName: 'Reset WEBSITE_RUN_FROM_PACKAGE = 0'
                inputs:
                  azureSubscription: $(azureServiceConnectionId)
                  appName: 'myApplicationfinal07-AppService'
                  resourceGroupName: 'Azuredevops'
                  appSettings: |
                    [
                      {
                        "name": "WEBSITE_RUN_FROM_PACKAGE",
                        "value": "0",
                        "slotSetting": false
                      }
                    ]

              - task: CmdLine@2
                displayName: 'Install Java and run JMeter Tests'
                inputs:
                  script: |
                    sudo apt-get update
                    sudo apt-get install -y openjdk-11-jdk
                    export JAVA_HOME=/usr/lib/jvm/java-11-openjdk-amd64
                    export PATH=$JAVA_HOME/bin:$PATH
                    java -version
                    wget https://archive.apache.org/dist/jmeter/binaries/apache-jmeter-5.2.1.tgz
                    tar -xf apache-jmeter-5.2.1.tgz
                    unzip -o $(Build.BuildId)-perftests.zip -d $(Build.BuildId)-perftests
                    cd $(Build.BuildId)-perftests
                    ./apache-jmeter-5.2.1/bin/jmeter -n -t automatedtesting/jmeter/test-suite/StressTestSuite.jmx -j jmeter.log -f
                    cat jmeter.log
                  workingDirectory: $(Pipeline.Workspace)/drop-perftests

#--------------------------------------------#  
# Selenium | Functional UI Tests
# ToDo: 
    - deployment: VMDeploy
      displayName: Selenium Tests
      environment:
        name: 'test-vm'        # ToDo: Change/provide a name
        resourceType: VirtualMachine
        tags: test
      strategy:
        runOnce:
          deploy:
            steps:
            - download: current
              artifact: drop-uitests     # ToDo: Change/provide a name
          
            - task: Bash@3
              inputs:
                targetType: 'inline'
                script: |   

                  #! /bin/bash
              
                  # Mise à jour des dépôts et installation des dépendances
                  sudo apt-get update -y
                  sudo apt-get upgrade -y
              
                  # Installation de Python et pip
                  sudo apt-get install python3 python3-pip python3-venv -y
              
                  # Installation d'unzip
                  sudo apt-get install unzip -y
              
                  # Installation de Chrome (plus stable que Chromium)
                  wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
                  echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google-chrome.list
                  sudo apt-get update -y
                  sudo apt-get install google-chrome-stable -y
              
                  # Vérifier l'installation de pip
                  python3 -m pip --version || {
                    echo "Installing pip manually..."
                    curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py
                    python3 get-pip.py --user
                    export PATH=$PATH:/home/azureuser/.local/bin
                  }
              
                  # Installation de selenium
                  python3 -m pip install selenium

                  # Vérification que l'import fonctionne
                  python3 -c "import selenium; print('✅ Selenium successfully installed:', selenium.__version__)"

                  # Voir les chemins où Python cherche les modules
                  python3 -m site
              
                  cd ~/
                  DIR=/home/azureuser/app
                  if [ ! -d "$DIR" ]; then
                    mkdir app
                  fi
              
                  # Debug: Vérifier la source des artifacts
                  echo "=== DEBUG: Checking artifact source ==="
                  ls -la /home/azureuser/azagent/_work/1/
                  echo "=== DEBUG: Checking drop-uitests ==="
                  ls -la /home/azureuser/azagent/_work/1/drop-uitests/ 2>/dev/null || echo "drop-uitests directory not found"
              
                  # Rechercher tous les fichiers zip dans l'arborescence
                  echo "=== DEBUG: Looking for zip files ==="
                  find /home/azureuser/azagent/_work/1/ -name "*.zip" -type f 2>/dev/null
              
                  cd app
              
                  # Vérifier que l'artifact existe
                  if [ ! -d "/home/azureuser/azagent/_work/1/drop-uitests/" ]; then
                    echo "ERROR: drop-uitests artifact not found!"
                    exit 1
                  fi
              
                  # Chercher l'archive de tests
                  ZIP_FILE=$(find /home/azureuser/azagent/_work/1/drop-uitests/ -name "*.zip" | head -1)
                  if [ -z "$ZIP_FILE" ]; then
                    echo "ERROR: No zip file found in drop-uitests!"
                    echo "Contents of drop-uitests:"
                    ls -la /home/azureuser/azagent/_work/1/drop-uitests/
                    exit 1
                  fi
              
                  echo "Found test archive: $ZIP_FILE"
                  cp "$ZIP_FILE" tests.zip
              
                  # Debug: Vérifier le contenu avant dézippage
                  echo "=== DEBUG: Files in app directory before unzip ==="
                  ls -la
              
                  # Dézipper l'archive
                  echo "Unzipping tests.zip..."
                  unzip -o tests.zip
                  echo "=== DEBUG: Files after unzip ==="
                  ls -la
                  find . -name "*.py" -type f
              
                  # Installation de ChromeDriver
                  echo "=== Installing ChromeDriver ==="
                  # Obtenir la version de Chrome installée
                  CHROME_VERSION=$(google-chrome --version | cut -d " " -f3 | cut -d "." -f1)
                  echo "Chrome version: $CHROME_VERSION"
              
                  # Télécharger ChromeDriver compatible
                  CHROMEDRIVER_VERSION="124.0.6367.91"
                  wget https://chromedriver.storage.googleapis.com/${CHROMEDRIVER_VERSION}/chromedriver_linux64.zip
                  unzip -o chromedriver_linux64.zip
                  chmod +x chromedriver
                  sudo mv chromedriver /usr/local/bin/
              
                  export PATH=$PATH:/home/azureuser/.local/bin
              
                  echo "Starting Selenium Tests"
              
                  # Rechercher le fichier de test
                  TEST_FILE=$(find . -name "add_remove_from_cart.py" -type f | head -1)
                  if [ -n "$TEST_FILE" ]; then
                    echo "Found test file at: $TEST_FILE"
                    cd $(dirname "$TEST_FILE")
                    echo "Current directory: $(pwd)"
                    echo "Files in test directory:"
                    ls -la
                  
                    # Créer le fichier de log avec les bonnes permissions
                    touch /home/azureuser/app/selenium.log
                    chmod 666 /home/azureuser/app/selenium.log
                  
                    # Exécuter le test
                    echo "=== EXECUTING SELENIUM TEST ===" | tee /home/azureuser/app/selenium.log
                    python3 add_remove_from_cart.py 2>&1 | tee -a /home/azureuser/app/selenium.log
                    echo "=== TEST EXECUTION COMPLETED ===" | tee -a /home/azureuser/app/selenium.log
                  else
                    echo "Error: add_remove_from_cart.py not found anywhere"
                    echo "All Python files found:"
                    find /home/azureuser/app -name "*.py" -type f
                    exit 1
                  fi
              
                  echo "Completed Selenium Tests. Check selenium.log for results."
              
                  # Afficher le contenu du log dans la console
                  echo "=== SELENIUM TEST RESULTS ==="
                  cat /home/azureuser/app/selenium.log || echo "No log file found"
                  echo "=== END OF RESULTS ==="
              
                  # Copier le log vers un répertoire accessible pour la publication
                  mkdir -p /home/azureuser/TestResults
                  cp /home/azureuser/app/selenium.log /home/azureuser/TestResults/ 2>/dev/null || echo "No log file to copy"
              
            # Publier les résultats des tests comme artifact
            - task: PublishBuildArtifacts@1
              inputs:
                pathtoPublish: '/home/azureuser/TestResults'
                artifactName: 'selenium-test-results'
              displayName: 'Publish Selenium Test Results'
              condition: always() # Publier même si les tests échouent
